{"version":3,"sources":["atoms/Book.tsx","action/fetchBooksMock.ts","organisms/BookShelf.tsx","atoms/HomeIcon.tsx","molecules/SideMenuIcons.tsx","organisms/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Book","BookContainer","status","this","props","alt","title","src","img","React","Component","styled","div","fetchBooks","a","id","imageUrl","BookShelf","_isMounted","state","books","setState","items","map","book","key","style","padding","display","HomeIcon","SvgIcon","d","SideMenuIcons","List","text","index","ListItem","button","ListItemIcon","ListItemText","primary","useStyles","makeStyles","theme","createStyles","root","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","mixins","content","flexGrow","Header","classes","useTheme","useState","isOpen","setOpen","AppBar","position","className","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Button","Drawer","variant","paper","direction","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2c280dd.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  title?: string;\n  status?: string;\n  img?: string;\n}\ninterface IState {}\n\nclass Book extends React.Component<IProps, IState> {\n  render() {\n    return (\n      <BookContainer status={this.props.status}>\n        <img alt={this.props.title} src={this.props.img} />\n      </BookContainer>\n    );\n  }\n}\n\nexport default Book;\n\nconst BookContainer = styled.div`\n  cursor: pointer;\n  display: inline-block;\n  width: 150px;\n  height: 220px;\n  position: relative;\n  background: ${(props: IProps) =>\n    props.status === \"貸出中\" ? \"black\" : \"white\"};\n  z-index: 1;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 9px 20px 0 rgba(0, 0, 0, 0.25);\n  overflow: hidden;\n  transition: box-shadow 0.2s linear;\n  img {\n    width: inherit;\n    height: inherit;\n    transform-origin: 0 50%;\n    transform: rotateY(0);\n    transition: all 0.45s ease;\n  }\n  &:hover {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.25),\n      0 9px 20px 0 rgba(0, 0, 0, 0.45);\n  }\n  &:hover img {\n    transform: rotateY(-50deg);\n    box-shadow: 1px 3px 5px 5px rgba(0, 0, 0, 0.2);\n  }\n  &::after,\n  &::before {\n    content: \"\";\n    display: block;\n    width: inherit;\n    height: inherit;\n    position: absolute;\n    z-index: -1;\n    top: 0;\n    background: white;\n    border: 1px solid #d9d9d9;\n  }\n  &::before {\n    left: -3px;\n  }\n  &::after {\n    left: -6px;\n  }\n`;\n","const fetchBooks = async () => {\n  return [\n    {\n      id: \"123456789\",\n      title: \"web api the good parts\",\n      imageUrl:\n        \"https://images-na.ssl-images-amazon.com/images/I/51GHwTNJgSL._SX389_BO1,204,203,200_.jpg\",\n      status: \"貸出中\"\n    },\n    {\n      id: \"vcd67uiklp098uyh\",\n      title: \"デザインパターン\",\n      imageUrl:\n        \"https://images-na.ssl-images-amazon.com/images/I/51QsmvkObML._SX392_BO1,204,203,200_.jpg\"\n    },\n    {\n      id: \"nfrtyu87tghnhji\",\n      title: \"WebDBPress\",\n      imageUrl:\n        \"https://images-na.ssl-images-amazon.com/images/I/51Y3LfVnduL._SX352_BO1,204,203,200_.jpg\"\n    }\n  ];\n};\n\nexport default fetchBooks;\n","import React from \"react\";\nimport Book from \"../atoms/Book\";\nimport fetchBooks from \"../action/fetchBooksMock\";\n\ninterface IBook {\n  id?: string;\n  title?: string;\n  imageUrl?: string;\n  status?: string;\n}\n\ninterface IProps {}\n\ninterface IState {\n  books: IBook[];\n}\n\nclass BookShelf extends React.Component<IProps, IState> {\n  _isMounted = false;\n\n  constructor(props: Readonly<IProps>) {\n    super(props);\n    this.state = {\n      books: []\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    const books = await fetchBooks();\n    if (this._isMounted) {\n      this.setState({\n        books: books\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const items = this.state.books.map((book: IBook) => (\n      <div key={book.id} style={{ padding: \"30px\", display: \"inline-block\" }}>\n        <Book img={book.imageUrl} title={book.title} status={book.status} />\n      </div>\n    ));\n    return <div>{items}</div>;\n  }\n}\n\nexport default BookShelf;\n","import React from \"react\";\nimport { SvgIcon } from \"@material-ui/core\";\n\nexport function HomeIcon(props: any) {\n  return (\n    <SvgIcon {...props}>\n      <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n    </SvgIcon>\n  );\n}\n","import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\n\nexport const SideMenuIcons: React.FC = () => {\n  return (\n    <List>\n      {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\n        <ListItem button key={text}>\n          <ListItemIcon>\n            {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n          </ListItemIcon>\n          <ListItemText primary={text} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { AppBar, Toolbar, IconButton, Button, Drawer } from \"@material-ui/core\";\nimport { HomeIcon } from \"../atoms/HomeIcon\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport {\n  createStyles,\n  makeStyles,\n  useTheme,\n  Theme\n} from \"@material-ui/core/styles\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { SideMenuIcons } from \"../molecules/SideMenuIcons\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginRight: 36\n    },\n    hide: {\n      display: \"none\"\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: \"nowrap\"\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    drawerClose: {\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      overflowX: \"hidden\",\n      width: theme.spacing(7) + 1,\n      [theme.breakpoints.up(\"sm\")]: {\n        width: theme.spacing(9) + 1\n      }\n    },\n    toolbar: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      padding: theme.spacing(0, 1),\n      ...theme.mixins.toolbar\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3)\n    }\n  })\n);\n\nexport default function Header() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isOpen, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: isOpen\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: isOpen\n            })}\n          >\n            <MenuIcon style={{ color: \"white\" }} />\n          </IconButton>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <HomeIcon style={{ color: \"white\" }} />\n          </IconButton>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: isOpen,\n          [classes.drawerClose]: !isOpen\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: isOpen,\n            [classes.drawerClose]: !isOpen\n          })\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? (\n              <ChevronRightIcon />\n            ) : (\n              <ChevronLeftIcon />\n            )}\n          </IconButton>\n        </div>\n        <SideMenuIcons />\n      </Drawer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport BookShelf from \"./organisms/BookShelf\";\nimport Header from \"./organisms/Header\";\n// import IsbnScanner from \"./organisms/IsbnScanner\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <BookShelf />\n      {/* <IsbnScanner /> */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}